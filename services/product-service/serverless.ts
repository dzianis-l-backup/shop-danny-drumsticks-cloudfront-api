import type { AWS } from "@serverless/typescript"
import { join } from "path"
import { config } from "dotenv"

const pathToEnv = join(__dirname, "./.env")
config({ path: pathToEnv })

import getProductsList from "@functions/getProductsList"
import getProductsById from "@functions/getProductsById"
import createProduct from "@functions/createProduct"
import catalogBatchProcess from "@functions/catalogBatchProcess"
import { BroadCasts } from "./src/types"

const serverlessConfiguration: AWS = {
    service: "product-service",
    frameworkVersion: "3",
    plugins: ["serverless-auto-swagger", "serverless-webpack"],
    provider: {
        name: "aws",
        runtime: "nodejs14.x",
        stage: "dev",
        region: process.env.REGION as AWS["provider"]["region"],
        profile: "danny",
        apiGateway: {
            minimumCompressionSize: 1024,
            shouldStartNameWithService: true,
        },
        environment: {
            AWS_NODEJS_CONNECTION_REUSE_ENABLED: "1",
            NODE_OPTIONS: "--enable-source-maps --stack-trace-limit=1000",
            REGION: process.env.REGION,
            TABLE_PRODUCTS: process.env.TABLE_PRODUCTS,
            TABLE_STOCKS: process.env.TABLE_STOCKS,
            MY_SQL_MASTER_USERNAME: process.env.MY_SQL_MASTER_USERNAME,
            MY_SQL_MASTER_PASSWORD: process.env.MY_SQL_MASTER_PASSWORD,
            MY_SQL_HOST: process.env.MY_SQL_HOST,
            MY_SQL_POST: process.env.MY_SQL_POST,
            MY_SQL_DATABASE: process.env.MY_SQL_DATABASE,
            SQS_QUEUE_NAME: process.env.SQS_QUEUE_NAME,
            SNS_TOPIC_CREATE_BATCH_PROCESS:
                process.env.SNS_TOPIC_CREATE_BATCH_PROCESS,
            SNS_TOPIC_CREATE_BATCH_PROCESS_ARN: {
                Ref: "SNSTopic",
            },
        },
        iamRoleStatements: [
            {
                Effect: "Allow",
                Action: "sns:*",
                Resource: {
                    Ref: "SNSTopic",
                },
            },
        ],
        iam: {
            role: {
                name: "${self:service}-${self:provider.region}-${self:provider.stage}-lambdaRole-autogenerated",
                managedPolicies: [
                    "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
                ],
            },
        },
    },
    functions: {
        getProductsList,
        getProductsById,
        createProduct,
        catalogBatchProcess,
    },
    package: { individually: true },
    resources: {
        Resources: {
            SQSQueue: {
                Type: "AWS::SQS::Queue",
                Properties: { QueueName: process.env.SQS_QUEUE_NAME },
            },
            SNSTopic: {
                Type: "AWS::SNS::Topic",
                Properties: {
                    TopicName: process.env.SNS_TOPIC_CREATE_BATCH_PROCESS,
                },
            },
            SNSSubscription: {
                Type: "AWS::SNS::Subscription",
                Properties: {
                    Endpoint: process.env.EMAIL_BUSINESS,
                    Protocol: "email",
                    FilterPolicyScope: "MessageAttributes",
                    FilterPolicy: {
                        broadcast: [BroadCasts.Business],
                    },
                    TopicArn: {
                        Ref: "SNSTopic",
                    },
                },
            },
            SNSSubscriptionPrivate: {
                Type: "AWS::SNS::Subscription",
                Properties: {
                    Endpoint: process.env.EMAIL_PRIVATE,
                    Protocol: "email",
                    FilterPolicyScope: "MessageAttributes",
                    FilterPolicy: {
                        broadcast: [BroadCasts.Private],
                    },
                    TopicArn: {
                        Ref: "SNSTopic",
                    },
                },
            },
        },
    },
    custom: {
        esbuild: {
            bundle: true,
            minify: false,
            sourcemap: true,
            exclude: ["aws-sdk"],
            target: "node14",
            define: { "require.resolve": undefined },
            platform: "node",
            concurrency: 10,
        },
        autoswagger: {
            typefiles: ["./src/types/index.ts"],
        },
        webpack: {
            packager: "yarn",
        },
    },
}

module.exports = serverlessConfiguration
